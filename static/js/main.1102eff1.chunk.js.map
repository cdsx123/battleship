{"version":3,"sources":["components/Ship.js","components/Player.js","components/GameBoard.js","components/App.js","serviceWorker.js","index.js"],"names":["Ship","props","state","boxes","hit","bind","pos","this","setState","prevState","newLength","console","log","i","push","Component","Player","turn","GameBoard","checkSunk","number","hits","numHits","newSunk","sunkShips","isAllSunk","key","shipLength","allSunk","gameEnd","boardNum","alert","place","coords","shipName","length","newBoard","board","replace","recieveAttack","shipNames","index","newTurn","newPos","hitPos","newNum","handleClick","event","id","target","slice","attackPos","map","box","boxClass","text","invisible","className","ships","name","shipClass","Fragment","onClick","App","Array","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1102eff1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass Ship extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      boxes: [],\n      hit: 0,\n    }\n    this.hit = this.hit.bind(this)\n\n  }\n\n  hit(pos) {\n    this.setState(prevState => {\n        let newLength = prevState.boxes\n        newLength[pos] = 'hit'\n        console.log('hit at ' + pos)\n        return({\n          boxes: newLength,\n          hit: prevState.hit + 1\n        })\n    })\n    \n    \n  }\n\n  componentDidMount(){\n      this.setState(() => {\n        let newLength = []\n        for(let i = 0; i < this.props.boxes; i++){\n        newLength.push('')\n        }\n        return({\n          boxes: newLength\n        })\n      })\n  }\n\n  componentDidUpdate(){\n\n    if (!this.state.boxes[this.props.pos]){\n      this.hit(this.props.pos)\n    }\n      \n    }\n  \n\n  render(){\n    // let divClass = this.props.invisible ? 'ship invisible' : 'ship'\n    //   let items = []\n    //   let boxes = this.state.boxes\n    //   for(let i = 0; i < boxes.length; i++){\n\n    //     let className = 'shipBox';\n    //     if(boxes[i]){\n    //       className = 'shipBox hit'\n    //     } \n    //     items.push(<div className={className} key={i} id={this.props.name}></div>)\n    //   }\n    return (\n      <div>\n        {/*className={divClass}*/}\n        {/* {items} */}\n      </div>\n    );\n  }\n}\n\nexport default Ship;\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Player extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            turn: this.props.turn,\r\n        }\r\n    }\r\n\r\n    //AI code here\r\n    render(){\r\n        return(\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player","import React, { Component } from 'react';\r\nimport Ship from './Ship'\r\nimport Player from './Player'\r\n\r\nclass GameBoard extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            turn: 1,\r\n            attackPos: '',\r\n            board: \r\n            [\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n                '', '', '', '', '', '', '', '', '', '',\r\n            ],\r\n            shipLength: {\r\n                'Carrier': 5,\r\n                'Battleship': 4, \r\n                'Cruiser': 3, \r\n                'Submarine': 3, \r\n                'Destroyer': 2,\r\n            },\r\n            shipNames: [\r\n                'Carrier',\r\n                'Battleship',\r\n                'Cruiser',\r\n                'Submarine',\r\n                'Destroyer',\r\n            ],\r\n            sunkShips: {\r\n                'Carrier': false,\r\n                'Battleship': false,\r\n                'Cruiser': false,\r\n                'Submarine': false,\r\n                'Destroyer': false,\r\n            },\r\n            allSunk: false,\r\n            hitPos: {\r\n                'Carrier': 0,\r\n                'Battleship': 0,\r\n                'Cruiser': 0,\r\n                'Submarine': 0,\r\n                'Destroyer': 0,\r\n            },\r\n            numHits: {\r\n                'Carrier': 0,\r\n                'Battleship': 0,\r\n                'Cruiser': 0,\r\n                'Submarine': 0,\r\n                'Destroyer': 0,\r\n            }\r\n        }\r\n    }\r\n\r\n    checkSunk = () => {\r\n        \r\n        this.setState(prevState => {\r\n\r\n            let number = 0;\r\n            const hits = prevState.numHits\r\n            const newSunk = prevState.sunkShips\r\n            let isAllSunk = false\r\n\r\n            for(let key in hits){\r\n                if(hits[key] >= prevState.shipLength[key]){\r\n                    newSunk[key] = true\r\n                }\r\n            }\r\n\r\n            for (let key in newSunk){\r\n                if(newSunk[key]){\r\n                    number += 1\r\n                }\r\n            }\r\n\r\n            if(number >= 5){\r\n                isAllSunk = true\r\n            }\r\n            return({\r\n                allSunk: isAllSunk,\r\n                sunkShips: newSunk\r\n            })\r\n        }, \r\n        () => {\r\n            if(this.state.allSunk){\r\n                this.gameEnd()\r\n            }\r\n        })\r\n    }\r\n\r\n    gameEnd = () => {\r\n        if(this.props.boardNum === '2'){\r\n            alert('Player 1 Wins')\r\n        } else{\r\n            alert('Player 2 Wins!')\r\n        }\r\n        \r\n    }\r\n\r\n    place = (coords, shipName) => {\r\n        const length = this.state.shipLength[shipName]\r\n        this.setState(prevState => {\r\n            \r\n            const newBoard = prevState.board;\r\n            for (let i = 0; i < newBoard.length; i++){\r\n                newBoard[i] = newBoard[i].replace(shipName, \"\");\r\n            }\r\n            for(let i = -1; i < length-1; i++){\r\n                newBoard[coords+i] = shipName\r\n            }\r\n            \r\n            return({\r\n                board: newBoard\r\n            })\r\n        })\r\n    }\r\n\r\n    recieveAttack = (coords) => {\r\n        \r\n\r\n        this.setState(prevState => {\r\n            const newBoard = prevState.board;\r\n            for(let i = 0; i < 5; i++){\r\n                const shipName = prevState.shipNames[i]\r\n                if(newBoard[coords] === shipName){\r\n                    for(let index = 1; index < 6; index++){\r\n                        if (newBoard[coords - index] !== shipName){\r\n                            let newTurn = prevState.turn\r\n                            newTurn++\r\n                            const newPos = prevState.hitPos\r\n                            newPos[shipName] = index - 1\r\n                            newBoard[coords] = 'hit'\r\n                            const newNum = prevState.numHits\r\n                            newNum[shipName] += 1\r\n                            return({\r\n                                board: newBoard,\r\n                                hitPos: newPos,\r\n                                numHits: newNum,\r\n                                turn: newTurn,\r\n                            })\r\n                        } \r\n                    }\r\n                } else if (newBoard[coords] === ''){\r\n                    newBoard[coords] = 'attacked'\r\n                    let newTurn = prevState.turn\r\n                    newTurn++\r\n                    return({\r\n                        board: newBoard,\r\n                        turn: newTurn,\r\n                    })\r\n                }\r\n            }    \r\n        },\r\n        () => {        console.log(this.state.turn)\r\n            this.checkSunk()}\r\n        )\r\n\r\n    }\r\n\r\n   \r\n\r\n    componentDidMount() {\r\n        let index = 0;\r\n        for(let i = 1; i < 50; i += 10){\r\n            this.place(i, this.state.shipNames[index])\r\n            index++\r\n        }\r\n    }\r\n\r\n     handleClick = (event) => {\r\n\r\n            const id = event.target.id.slice(0, event.target.id.length - 1)\r\n\r\n            this.setState({attackPos: id},\r\n\r\n                () => {if(this.state.board[this.state.attackPos] !== 'attacked' && this.state.board[this.state.attackPos] !== 'hit'){\r\n                    if(this.state.turn === this.props.boardNum % 2 || this.state.turn === (this.props.boardNum % 2) + 2){\r\n                        this.recieveAttack(this.state.attackPos)\r\n                    }\r\n                }}\r\n            )\r\n        }\r\n        \r\n        \r\n        \r\n    \r\n\r\n    render(){\r\n        \r\n        let boxes = this.state.board.map((box, index) => {\r\n            let boxClass = 'box';\r\n            let text = '';\r\n            if (box === 'attacked') {\r\n                boxClass = 'box attacked'\r\n            } else if(box === 'hit'){\r\n                boxClass = 'box hit'\r\n                text = 'X'\r\n            } \r\n            for(let i = 0; i < 5; i++){\r\n                if(this.props.invisible && box === this.state.shipNames[i]){\r\n                    boxClass = 'box'\r\n                } else if(box === this.state.shipNames[i]){\r\n                    boxClass = 'box shipBox'\r\n                }\r\n            }\r\n            \r\n            return (\r\n                <div \r\n                    className = {boxClass} \r\n                    key = {index} \r\n                    id = {index + this.props.boardNum}>{text}</div>\r\n            )\r\n        })\r\n        let ships = []\r\n        \r\n        for(let i = 0; i < 5; i++) {\r\n            let name = this.state.shipNames[i]\r\n            let shipClass = false\r\n            if(this.props.invisible === true){\r\n                shipClass = 'invisible'\r\n            }\r\n            ships.push(<Ship \r\n            boxes ={this.state.shipLength[name]} \r\n            key={name + this.props.boardNum} \r\n            name={name + this.props.boardNum}\r\n            pos={this.state.hitPos[name]}\r\n            invisible={shipClass}\r\n            />)\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n                <div className='board' onClick={this.handleClick}>\r\n                    {boxes}\r\n                    {ships}\r\n                </div>\r\n                <Player turn={this.state.turn}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard\r\n","import React, { Component } from 'react';\r\nimport GameBoard from './GameBoard'\r\nimport Player from './Player'\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            turn: 0,\r\n            'attackPos1': '',\r\n            'attackPos2': '',\r\n            'board1': Array(100),\r\n            'board2': Array(100)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            \r\n                <GameBoard \r\n                boardNum = '1' \r\n                invisible = {false}/>\r\n                \r\n                <GameBoard \r\n                boardNum = '2' \r\n                invisible = {true} />\r\n\r\n                <Player turn={this.state.turn}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n\n/*things to do:\n1: make it so App.js is the one that manages the board states, not GameBoard.js/\n2: make an AI\n3: make it so App.js is the one that checks whether or not \nall ships have been sunk, and ends the game, not GameBoard.js/\n4: make it so you can rotate ships\n5: implement turns\n6: make it so the placement of ships on the AI's side is random\n7: implement drag and drop\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}